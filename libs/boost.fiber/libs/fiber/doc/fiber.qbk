[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[article Fiber
    [quickbook 1.4]
    [authors [Kowalke, Oliver]]
    [copyright 2009 Oliver Kowalke]
    [purpose C++ Library for launching fibers (micro-threads) and synchronizing data between them]
    [category text]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]


[def __boost_atomic__ [@http://www.chaoticmind.net/~hcb/projects/boost.atomic [*Boost.Atomic]]]
[def __boost_fiber__ [*Boost.Fiber]]
[def __boost_move__ [@http://svn.boost.org/svn/boost/sandbox/move [*Boost.Move]]]
[def __boost_thread__ [@http://www.boost.org/libs/thread [*Boost.Thread]]]

[template barrier_link[link_text] [link fiber.synchronization.barriers [link_text]]]
[template condition_link[link_text] [link fiber.synchronization.conditions [link_text]]]
[template fiber_link[link_text] [link fiber.fiber_management.fiber [link_text]]]
[template fiber_id_link[link_text] [link fiber.fiber_management.fiber.id [link_text]]]
[template mutex_link[link_text] [link fiber.synchronization.mutex_types.mutex [link_text]]]
[template scheduler_link[link_text] [link fiber.fiber_management.scheduler [link_text]]]
[template strategy_link[link_text] [link fiber.fiber_management.strategy [link_text]]]
[template round_robin_link[link_text] [link fiber.fiber_management.strategy.round_robin [link_text]]]

[template auto_reset_wait_link[link_text] [link fiber.synchronization.eventvar_ref.auto_reset_event.wait [link_text]]]
[template manual_reset_wait_link[link_text] [link fiber.synchronization.eventvar_ref.manual_reset_event.wait [link_text]]]
[template count_down_wait_link[link_text] [link fiber.synchronization.eventvar_ref.count_down_event.wait [link_text]]]
[template cond_wait_link[link_text] [link fiber.synchronization.conditions.condition.wait [link_text]]]
[template interrupt_link[link_text] [link fiber.fiber_management.fiber.interrupt [link_text]]]
[template join_link[link_text] [link fiber.fiber_management.fiber.join [link_text]]]

[template spin_barrier_link[link_text] [link fiber.spin_synchronization.barriers [link_text]]]
[template spin_condition_link[link_text] [link fiber.spin_synchronization.conditions [link_text]]]
[template spin_mutex_link[link_text] [link fiber.spin_synchronization.mutex_types.mutex [link_text]]]

[template interr_enabled_link[link_text] [link fiber.fiber_management.this_fiber.interruption_enabled [link_text]]]
[template interr_requested_link[link_text] [link fiber.fiber_management.this_fiber.interruption_requested [link_text]]]
[template interr_point_link[link_text] [link fiber.fiber_management.this_fiber.interruption_point [link_text]]]
[template disable_interr_link[link_text] [link fiber.fiber_management.this_fiber.disable_interruption [link_text]]]
[template restore_interr_link[link_text] [link fiber.fiber_management.this_fiber.restore_interruption [link_text]]]
[template interr_points_link[link_text] [link fiber.fiber_management.predefined_interruption_points [link_text]]]

[def __blocked__ ['blocked]]
[def __not_a_fiber__ ['not-a-fiber]]
[def __lockable_concept__ ['lockable concept]]
[def __rendezvous__ ['rendezvous]]

[def __barrier__ [barrier_link ['barrier]]]
[def __condition__ [condition_link ['condition]]]
[def __fiber__ [fiber_link ['fiber]]]
[def __fiber_id__ [fiber_id_link ['fiber-id]]]
[def __interruption_points__ [interr_points_link ['interruption points]]]
[def __mutex__ [mutex_link ['mutex]]]
[def __scheduler__ [scheduler_link ['scheduler]]]
[def __strategy__ [strategy_link ['strategy]]]
[def __round_robin__ [round_robin_link ['round_robin]]]

[def __spin_barrier__ [spin_barrier_link ['spin-barrier]]]
[def __spin_condition__ [spin_condition_link ['spin-condition]]]
[def __spin_mutex__ [spin_mutex_link ['spin-mutex]]]

[def __cond_wait__ [cond_wait_link `wait()`]]
[def __interrupt__ [interrupt_link `interrupt()`]]
[def __join__ [join_link `join()`]]
[def __lock__ `lock()`]
[def __try_lock__ `try_lock()`]
[def __unlock__ `unlock()`]

[def __interruption_enabled__ [interr_enabled_link `boost::this_fiber::interruption_enabled()`]]
[def __interruption_requested__ [interr_requested_link `boost::this_fiber::interruption_requested()`]]
[def __interruption_point__ [interr_point_link `boost::this_fiber::interruption_point()`]]
[def __disable_interruption__ [disable_interr_link `boost::this_fiber::disable_interruption`]]
[def __restore_interruption__ [restore_interr_link `boost::this_fiber::restore_interruption`]]

[def __fiber_error__ `boost::fibers::fiber_error`]
[def __fiber_interrupted__ `boost::fibers::fiber_interrupted`]
[def __fiber_moved__ `boost::fibers::fiber_moved`]
[def __invalid_argument__ `std::invalid_argument`]
[def __lock_error__ `boost::fibers::lock_error`]
[def __system_error__ `boost::system::system_error`]



[include overview.qbk]
[include fiber_ref.qbk]
[include synchronization.qbk]
[include spin_synchronization.qbk]
[include todo.qbk]
[include acknowledgements.qbk]
