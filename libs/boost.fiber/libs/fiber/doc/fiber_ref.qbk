[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:fiber_management Fiber Management]

[heading Synopsis]

Each __fiber__ class represents a user-space context of execution which will be launched and managed by the
__scheduler__ class. Objects of type __fiber__ are copy- and moveable.

	boost::fiber f; // not-a-fiber

	void f()
	{
		boost::fiber f1( boost::fibers::make_fiber( some_fn, boost::fiber::default_stacksize) );
		boost::fiber f2( boost::fibers::make_fiber( another_fn, boost::fiber::default_stacksize) );

		boost::fibers::scheduler<> s;
		s.submit( f1); // f1 gets copied
		s.submit( boost::move( f2) ); // f2 gets moved

		std::cout << f1.get_id() << std::endl;
		std::cout << f2.get_id() << std::endl;
	}


[heading Launching]

A new fiber is launched by passing an object of a callable type that can be invoked with no parameters to the
constructor and submiting the fiber (copy- or move-op.) to an instance of __scheduler__. The object is then copied
into internal storage, and invoked on the newly-created fiber. If the object must not (or cannot) be copied, then
`boost::ref` can be used to pass in a reference to the function object. In this case, the user of __boost_fiber__
must ensure that the referred-to object outlives the newly-created fiber.

	struct callable
	{ void operator()(); };

	boost::fiber copies_are_safe()
	{
		callable x;
		return boost::fiber( x);
	} // x is destroyed, but the newly-created fiber has a copy, so this is OK

	boost::fiber oops()
	{
		callable x;
		return boost::fiber( boost::ref( x), boost::fiber::default_stacksize);
	} // x is destroyed, but the newly-created fiber still has a reference
	  // this leads to undefined behaviour

If you wish to construct an instance of __fiber__ with a function or callable object that requires arguments to be
supplied, this can be done by passing additional arguments to the __fiber__ constructor:

	void find_the_question( int the_answer);

	boost::fiber deep_thought_2( find_the_question, 42, boost::fiber::default_stacksize);

The arguments are ['copied] into the internal fiber structure: if a reference is required, use `boost::ref`, just as
for references to callable functions.

For convinience `boost::fibers::make_fiber()` is provided:

	boost::fiber f( boost::fibers::make_fiber( new_fn, arg1, arg2, arg3, boost::fiber::default_stacksize) );

Another alternative is to use `scheduler<>::make_fiber()` which creates and stores the new fiber inside the scheduler.

	boost::fibers::scheduler<> sched;
	sched.make_fiber( new_fn, arg1, arg2, arg3, boost::fiber_default_stacksize);

[caution If you encounter segmentation faults or bus errors it may be possible that the stacksize for the fibers is
too small.]


[heading Exceptions]

Exceptions thrown by the function or callable object passed to the __fiber__ constructor are consumed by the
framework (if it required to know which exceptions was thrown use __future__ and __packaged_task__).

[warning Don't use the sjlj exception model.]

[heading Joining]

In order to wait for a fiber to finish, the __join__ member functions of the __fiber__ object can be
used. __join__ will block the calling fiber until the fiber represented by the __fiber__ object has completed.
If the fiber has already completed, or the __fiber__ object represents __not_a_fiber__, then __join__ returns
immediately.

	void some_fn()
	{}

	void joining_fiber_fn( boost::fiber f)
	{ f.join(); }

	boost:.fibers::scheduler<> sched;
	boost::fiber f( some_fn, boost::fiber_default_stacksize);
	sched.submit_fiber( f);
	sched.make_fiber( joining_fiber, f, boost::fiber_default_stacksize);
	for (;;)
	{
		while ( sched.run() );
		if ( sched.empty() ) break;
	}


[heading Interruption]

A running fiber can be ['interrupted] by invoking the __interrupt__ member function. When the interrupted fiber
next executes one of the specified __interruption_points__ (or if it is currently __blocked__ whilst executing one)
with interruption enabled, then a __fiber_interrupted__ exception will be thrown in the interrupted fiber. If not
caught, this will cause the execution of the interrupted fiber to terminate.

If a fiber wishes to avoid being interrupted, it can create an instance of __disable_interruption__. Objects of this
class disable interruption for the fiber that created them on construction, and restore the interruption state to
whatever it was before on destruction:

	void f()
	{
		// interruption enabled here
		{
			boost::this_fiber::disable_interruption disabler1;
			// interruption disabled
			{
				boost::this_fiber::disable_interruption disabler2;
				// interruption still disabled
			} // disabler2 destroyed, interruption state restored
			// interruption still disabled
		} // disabler1 destroyed, interruption state restored
		// interruption now enabled
	}

The effects of an instance of __disable_interruption__ can be temporarily reversed by constructing an instance of
__restore_interruption__, passing in the __disable_interruption__ object in question. This will restore the
interruption state to what it was when the __disable_interruption__ object was constructed, and then disable
interruption again when the __restore_interruption__ object is destroyed.

	void g()
	{
		// interruption enabled here
		{
			boost::this_fiber::disable_interruption disabler;
			// interruption disabled
			{
				boost::this_fiber::restore_interruption restorer( disabler);
				// interruption now enabled
			} // restorer destroyed, interruption disable again
		} // disabler destroyed, interruption state restored
		// interruption now enabled
	}

At any point, the interruption state for the current fiber can be queried by calling __interruption_enabled__.


[heading Predefined Interruption Points]

The following functions are ['interruption points], which will throw __fiber_interrupted__ if interruption is
enabled for the current fiber, and interruption is requested for the current fiber:

* [join_link `boost::fiber::join()`]
* [cond_wait_link `boost::fibers::condition::wait()`]
* [auto_reset_wait_link `boost::fibers::auto_reset_event::wait()`]
* [manual_reset_wait_link `boost::fibers::manual_reset_event::wait()`]
* [count_down_wait_link `boost::fibers::count_down_event::wait()`]
* __interruption_point__


[heading Fiber IDs]

Objects of class __fiber_id__ can be used to identify fibers. Each running fiber has a unique ID
obtainable from the corresponding __fiber__ by calling the `get_id()` member function, or by calling
`boost::this_fiber::get_id()` from within the fiber. Objects of class __fiber_id__ can be copied, and used as
keys in associative containers: the full range of comparison operators is provided. Fiber IDs can also be written
to an output stream using the stream insertion operator, though the output format is unspecified.

Each instance of __fiber_id__ either refers to some fiber, or __not_a_fiber__. Instances that refer to __not_a_fiber__
compare equal to each other, but not equal to any instances that refer to an actual fiber.
The comparison operators on __fiber_id__ yield a total order for every non-equal fiber ID.


[section:fiber Class `fiber`]

	#include <boost/fiber/fiber.hpp>

	class fiber
	{
	public:
		fiber();
		~fiber();

		template< typename Fn >
		explicit fiber( Fn fn, std::size_t stack_size);

		template< typename Fn, typename A1, typename A2,... >
		fiber( Fn fn, A1 a1, A2 a2,..., std::size_t stack_size);

		template< typename Fn >
		explicit fiber( Fn && fn, std::size_t stack_size);

		// move support
		fiber( fiber && x);
		fiber & operator=( fiber && x);

		operator unspecified-bool-type() const;
		
		bool operator!() const;
		
		void swap( fiber & other);
		
		id get_id() const;
		
		bool operator==( fiber const&) const;
		bool operator!=( fiber const&) const;
		
		bool is_alive() const;
		
		int priority() const;
		
		void priority( int);
		
		void interrupt();
		bool interruption_requested() const;
		
		void cancel();
		
		void join();
	};

	void swap( fiber & lhs, fiber & rhs);

	template< typename Fn >
	fiber make_fiber( Fn fn, std::size_t stack_size);

	template< typename Fn, typename A1, typename A2,..., typename A10 >
	fiber make_fiber( Fn fn, A1 a1, A2 a2,..., A10 a10, std::size_t stack_size);


[section:default_constructor `fiber()`]
[variablelist
[[Effects:] [Constructs a __fiber__ instance that refers to __not_a_fiber__.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:callable_constructor_stack `template< typename Fn > fiber( Fn fn, std::size_t stack_size)`]
[variablelist
[[Preconditions:] [`Callable` must by copyable.]]
[[Effects:] [`fn` is copied into storage managed internally by the fiber library, and that copy is invoked on a
newly-created fiber. Second version sets the stack-size of the fiber.]]
[[Postconditions:] [`*this` refers to the newly created fiber.]]
[[Throws:] [__system_error__ if system call failed.]]
]
[endsect]

[section:multiple_argument_constructor `template< typename Fn, typename A1, typename A2,... > fiber( Fn fn, A1 a1, A2 a2,..., std::size_t stack_size)`]
[variablelist
[[Preconditions:] [`Fn` and each `A`n must by copyable or movable.]]
[[Effects:] [As if `fiber( boost::bind( fn, a1, a2,...) )`. Consequently, `fn` and each `a`n
are copied into internal storage for access by the new fiber.
Second version additionaly sets the stack-size used by the fiber.]]
[[Postconditions:] [`*this` refers to the newly created fiber.]]
[[Throws:] [__system_error__ if system call failed.]]
[[Note:] [Currently up to nine additional arguments `a1` to `a9` can be specified in addition to the function `fn`.]]
]
[endsect]

[section:destructor `~fiber()`]
[variablelist
[[Effects:] [Destroys `*this`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:get_id `fiber::id get_id() const`]
[variablelist
[[Returns:] [If `*this` refers to a fiber, an instance of __fiber_id__ that represents that fiber. Otherwise returns
a default-constructed __fiber_id__.]]
[[Throws:] [Nothing.]]
]

[endsect]

[section:join `void join()`]
[variablelist
[[Effects:] [Waits for `*this` to complete.]]
[[Throws:] [__fiber_interrupted__ if the current fiber is interrupted and __system_error__
if system call failed.]]
[[Notes:] [`join()` is one of the predefined __interruption_points__.]]
]
[endsect]

[section:interrupt `void interrupt()`]
[variablelist
[[Effects:] [If `*this` refers to a fiber, request that the fiber will be interrupted the next time it enters one of
the predefined __interruption_points__ with interruption enabled, or if it is currently __blocked__ in a call to one
of the predefined __interruption_points__ with interruption enabled .]]
[[Throws:] [__fiber_moved__ if not a fiber of execution.]]
]
[endsect]

[section:interruption_requested `bool interruption_requested()`]
[variablelist
[[Effects:] [If `*this` refers to a fiber, the function returns if the interruption of the fiber was already
requested.]]
[[Throws:] [__fiber_moved__ if `*this` is not a fiber of execution.]]
]
[endsect]

[section:cancel `void cancel()`]
[variablelist
[[Effects:] [If `*this` refers to a fiber, request that the fiber will be canceled the next time it yields its
execution.]]
[[Throws:] [__system_error__ if system call fails. __fiber_moved__ if  `*this` is not a fiber of execution.]]
]
[endsect]

[section:is_alive `bool is_alive()`]
[variablelist
[[Effects:] [If `*this` refers to a fiber, the function returns false if the fiber is terminated or not started 
Otherwise it returns true.]]
[[Throws:] [__fiber_moved__ if `*this` is not a fiber of execution.]]
]
[endsect]

[section:unspec_operator `operator unspecified-bool-type() const`]
[variablelist
[[Returns:] [If `*this` refers to a fiber, the function returns true. Otherwise false.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:not_operator `bool operator!() const`]
[variablelist
[[Returns:] [If `*this` refers not to a fiber, the function returns true. Otherwise false.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:equals `bool operator==( fiber const& other) const`]
[variablelist
[[Returns:] [`get_id()==other.get_id()`]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:not_equals `bool operator!=( fiber const& other) const`]
[variablelist
[[Returns:] [`get_id()!=other.get_id()`]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:swap `void swap( fiber & other)`]
[variablelist
[[Effects:] [Exchanges the fibers associated with `*this` and `other`, so `*this` is associated with the fiber 
associated with `other` prior to the call, and vice-versa.]]
[[Postconditions:] [`this->get_id()` returns the same value as `other.get_id()` prior to the call. `other.get_id()`
returns the same value as `this->get_id()` prior to the call.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:non_member_swap Non-member function `swap()`]

	#include <boost/fiber/fiber.hpp>

	void swap( fiber & lhs, fiber & rhs);

[variablelist
[[Effects:] [[link fiber.fiber_management.fiber.swap `lhs.swap( rhs)`].]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:non_member_make_fiber Non-member template function `make_fiber()`]

    #include <boost/fiber/fiber.hpp>
    
    template< typename Fn >
    fiber make_fiber( Fn fn, std::size_t stack_size);
    
    template< typename Fn, typename A1, typename A2,... >
    fiber make_fiber( Fn fn, A1 a1, A2 a2,..., std::size_t stack_size);

[variablelist
[[Effects:] [Creates a fiber.]]
]
[endsect]

[section:id Class `boost::fiber::id`]

    #include <boost/fiber/fiber.hpp>

    class fiber::id
    {
    public:
        id();

        bool operator==( id const& y) const;
        bool operator!=( id const& y) const;
        bool operator<( id const& y) const;
        bool operator>( id const& y) const;
        bool operator<=( id const& y) const;
        bool operator>=( id const& y) const;

        template< typename charT, typename traitsT >
        friend std::basic_ostream< charT, traitsT > & 
        operator<<( std::basic_ostream<charT, traitsT > & os, id const& x);
    };

[section:constructor `id()`]
[variablelist
[[Effects:] [Constructs a __fiber_id__ instance that represents __not_a_fiber__.]]
[[Throws:] [Nothing]]
]
[endsect]

[section:is_equal `bool operator==( id const& y) const`]
[variablelist
[[Returns:] [`true` if `*this` and `y` both represent the same fiber of execution, or both represent __not_a_fiber__, `false`
otherwise.]]
[[Throws:] [Nothing]]
]
[endsect]

[section:not_equal `bool operator!=( id const& y) const`]
[variablelist
[[Returns:] [`true` if `*this` and `y` represent different fibers of execution, or one represents a fiber of execution, and
the other represent __not_a_fiber__, `false` otherwise.]]
[[Throws:] [Nothing]]
]
[endsect]

[section:less_than `bool operator<( id const& y) const`]
[variablelist
[[Returns:] [`true` if `*this!=y` is `true` and the implementation-defined total order of __fiber_id__ values places `*this` before
`y`, `false` otherwise.]]
[[Throws:] [Nothing]]
[[Note:] [A __fiber_id__ instance representing __not_a_fiber__ will always compare less than an instance representing a fiber of
execution.]]
]
[endsect]

[section:greater_than `bool operator>( id const& y) const`]
[variablelist
[[Returns:] [`y<*this`]]
[[Throws:] [Nothing]]
]
[endsect]

[section:less_than_or_equal `bool operator<=( id const& y) const`]
[variablelist
[[Returns:] [`!(y<*this)`]]
[[Throws:] [Nothing]]
]
[endsect]

[section:greater_than_or_equal `bool operator>=( id const& y) const`]
[variablelist
[[Returns:] [`!(*this<y)`]]
[[Throws:] [Nothing]]
]
[endsect]

[section:stream_out Non-member template function `operator<<`]

        template< typename charT, typename traitsT >
        friend std::basic_ostream< charT, traitsT > & 
        operator<<( std::basic_ostream<charT, traitsT > & os, id const& x);

[variablelist
[[Effects:] [Writes a representation of the __fiber_id__ instance `x` to the stream `os`, such that the representation of two
instances of __fiber_id__ `a` and `b` is the same if `a==b`, and different if `a!=b`.]]
[[Returns:] [`os`]]
]
[endsect]

[endsect]

[endsect]

[section:this_fiber Namespace `this_fiber`]

[section:get_id Non-member function `get_id()`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        fiber::id get_id();
    }

[variablelist
[[Returns:] [An instance of __fiber_id__ that represents that currently executing fiber.]]
[[Throws:] [__fiber_error__ if an error occurs.]]
]
[endsect]

[section:interruption_point Non-member function `interruption_point()`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        void interruption_point();
    }

[variablelist
[[Effects:] [Check to see if the current fiber has been interrupted.]]
[[Throws:] [__fiber_interrupted__ if __interruption_enabled__ and __interruption_requested__ both return `true`.]]
]
[endsect]

[section:interruption_requested Non-member function `interruption_requested()`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        bool interruption_requested();
    }

[variablelist
[[Returns:] [`true` if interruption has been requested for the current fiber, `false` otherwise.]]
[[Throws:] [__fiber_error__ if an error occurs.]]
]
[endsect]

[section:interruption_enabled Non-member function `interruption_enabled()`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        bool interruption_enabled();
    }

[variablelist
[[Returns:] [`true` if interruption has been enabled for the current fiber, `false` otherwise.]]
[[Throws:] [__fiber_error__ if an error occurs.]]
]
[endsect]

[section:cancel Non-member function `cancel()`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        void cancel();
    }

[variablelist
[[Effects:] [Cancels the current fiber.]]
[[Throws:] [__fiber_error__ if an error occurs.]]
]
[endsect]

[section:yield Non-member function `yield()`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        void yield();
    }

[variablelist
[[Effects:] [Gives up the remainder of the current fiber's time slice, to allow other fibers to run.]]
[[Throws:] [__fiber_error__ if an error occurs.]]
]
[endsect]

[section:atfiberexit Non-member template function `at_fiber_exit()`]

    #include <boost/fiber/utility.hpp>

    template<typename Callable>
    void at_fiber_exit(Callable func);

[variablelist
[[Effects:] [A copy of `func` is placed in
fiber-specific storage. This copy is invoked when the current fiber
exits (even if the fiber has been interrupted).]]
[[Postconditions:] [A copy of `func` has been saved for invocation on fiber exit.]]
[[Throws:] [`std::bad_alloc` if memory cannot be allocated for the copy of the function, __fiber_error__ if any other
error occurs within the fiber library. Any exception thrown whilst copying `func` into internal storage.]]
[[Note:] [This function is *not* called if the fiber was terminated
forcefully using platform-specific APIs, or if the fiber is
terminated due to a call to `exit()`, `abort()` or
`std::terminate()`. In particular, returning from `main()` is
equivalent to call to `exit()`, so will not call any functions
registered with `at_fiber_exit()`]]
]
[endsect]

[section:submit Non-member function `submit_fiber( fiber)`]

    #include <boost/fiber/utility.hpp>

    namespace this_fiber
    {
        void submit_fiber( fiber);
    }

[variablelist
[[Effects:] [Submits the passed fiber to the scheduler running the active fiber.]]
[[Throws:] [__fiber_error__ if an error occurs.]]
]
[endsect]

[section:disable_interruption Class `disable_interruption`]

    #include <boost/fiber/interruption.hpp>

    namespace this_fiber
    {
        class disable_interruption
        {
        public:
            disable_interruption();
            ~disable_interruption();
        };
    }

`boost::this_fiber::disable_interruption` disables interruption for the current fiber on construction, and restores the prior
interruption state on destruction. Instances of `disable_interruption` cannot be copied or moved.

[section:constructor `disable_interruption()`]
[variablelist
[[Effects:] [Stores the current state of __interruption_enabled__ and disables interruption for the current fiber.]]
[[Postconditions:] [__interruption_enabled__ returns `false` for the current fiber.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:destructor `~disable_interruption()`]
[variablelist
[[Preconditions:] [Must be called from the same fiber from which `*this` was constructed.]]
[[Effects:] [Restores the current state of __interruption_enabled__ for the current fiber to that prior to the construction of `*this`.]]
[[Postconditions:] [__interruption_enabled__ for the current fiber returns the value stored in the constructor of `*this`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[endsect]

[section:restore_interruption Class `restore_interruption`]

    #include <boost/fiber/interruption.hpp>

    namespace this_fiber
    {
        class restore_interruption
        {
        public:
            explicit restore_interruption(disable_interruption& disabler);
            ~restore_interruption();
        };
    }

On construction of an instance of `boost::this_fiber::restore_interruption`, the interruption state for the current fiber is
restored to the interruption state stored by the constructor of the supplied instance of __disable_interruption__. When the instance
is destroyed, interruption is again disabled. Instances of `restore_interruption` cannot be copied or moved.

[section:constructor `explicit restore_interruption(disable_interruption& disabler)`]
[variablelist
[[Preconditions:] [Must be called from the same fiber from which `disabler` was constructed.]]
[[Effects:] [Restores the current state of __interruption_enabled__ for the current fiber to that prior to the construction of `disabler`.]]
[[Postconditions:] [__interruption_enabled__ for the current fiber returns the value stored in the constructor of `disabler`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:destructor `~restore_interruption()`]
[variablelist
[[Preconditions:] [Must be called from the same fiber from which `*this` was constructed.]]
[[Effects:] [Disables interruption for the current fiber.]]
[[Postconditions:] [__interruption_enabled__ for the current fiber returns `false`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[endsect]

[endsect]

[section:scheduler Scheduler]

[heading Synopsis]

The template __scheduler__ is responsible for managing and scheduling of fibers passed to it. The scheduling
algorithm is provided as an template argument to __scheduler__ (default is __round_robin__). The class implementing
the scheduling algorithm must derive from class __strategy__. It is possible to migrate fibers between schedulers.

[note If the fiber is not thread-affine (using thread-local-storage) it can be migrated to a scheduler running in
another thread.]

[warning The current implementation for Windows uses the Win32 Fiber API which does not allow to migrate fibers
to other threads.]

Usally __scheduler__ will be invoked until all fibers are scheduled and finished.

	boost::fibers::scheduler<> sched;
	sched.make_fiber( some_fn);

	for (;;)
	{
		while ( sched.run() );
		if ( sched.empty() ) break;
	}


[section:scheduler Template `template< typename Strategy > scheduler`]

	#include <boost/fiber/scheduler.hpp>

	template< typename Strategy >
	class scheduler
	{
	public:
		scheduler();

		~scheduler();

		bool run();

		bool empty();

		std::size_t size();

		std::size_t ready();

		void submit_fiber( fiber);

		template< typename Fn >
		void make_fiber( Fn fn, std::size_t stack_size);

		template< typename Fn >
		void make_fiber( Fn && fn, std::size_t stack_size);

		template< typename Fn, typename A1, typename A2,..., typename A10 >
		void make_fiber( Fn fn, A0 a0, A1 a1,..., A10 a10, std:size_t stack_size);

		void migrate_fiber( fiber f);

		template< typename OtherStrategy >
		void migrate_fiber( fiber::id const& id, scheduler< OtherStrategy & sched);
	};


[section:ctor `scheduler()`]
[variablelist
[[Effects:] [Creates an object of type scheduler< Strategy >.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:dtor `~scheduler()`]
[variablelist
[[Effects:] [Detaches all managed fibers and destroys the scheduler.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:run `bool run()`]
[variablelist
[[Effects:] [Executes a fiber from the internal storage and removes terminated fibers. The function returns
`true` if a fiber could be executed or a terminated fiber could be removed - otherwise `false`.]]
[[Throws:] [__system_error__ if a system call failed.]]
]
[endsect]

[section:empty `bool empty()`]
[variablelist
[[Effects:] [Returns `true` if the scheduler contains fibers (maybe runnable or waiting).]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:size `std::size_t size()`]
[variablelist
[[Effects:] [Returns how many fibers the scheduler contains (maybe runnable or waiting).]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:ready `std::size_t ready()`]
[variablelist
[[Effects:] [Returns how many fibers are ready to run in the scheduler.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:submit_fiber `void submit_fiber( fiber f)`]
[variablelist
[[Effects:] [This function stores the passed fiber in the scheduler.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:make_fiber2 `template< typename Fn > void make_fiber( Fn fn, std::size_t stack_size)`]
[variablelist
[[Effects:] [The functions create a fiber which gets stored in the internal structures from scheduler.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:make_fiber3 `template< typename Fn, typename A1, typename A2,..., typename A10 > void make_fiber( Fn fn, A0 a0, A1 a1,..., A10 a10, std::size_t stack_size)`]
[variablelist
[[Effects:] [The functions create a fiber which gets stored in the internal structures from scheduler.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:migrate_fiber `void migrate_fiber( fiber f)`]
[variablelist
[[Effects:] [The fiber will be migrated to the scheduler.]]
[[Throws:] [Throws __fiber_moved__, fiber_error, scheduler_error.]]
]
[endsect]

[section:migrate_fiber_t `template< typename OtherStrategy > void migrate_fiber( fiber::id const& id, scheduler< OtherStrategy > & sched)`]
[variablelist
[[Effects:] [The fiber will be migrated to the scheduler.]]
[[Throws:] [Throws __fiber_moved__, fiber_error, scheduler_error.]]
]
[endsect]

[endsect]

[endsect]

[section:strategy Strategy]

[heading Synopsis]

The template __scheduler__ accepts the implementation of the scheduling algorithm as a template argument
(currently __round_robin__ is the choosen as the default).
Each class destined to implement a scheduling algorithm must derive from __strategy__. The member `active_fiber`
holds the current (running) fiber and `master_fiber` executes the scheduling logic.


[section:strategy Class `strategy`]

	#include <boost/fiber/strategy.hpp>

	class strategy
	{
	protected:
		typedef thread_specific_ptr< fiber >	active_fiber_t;

		static active_fiber_t   active_fiber;
		fiber                   master_fiber;

		void attach( fiber &);
		void detach( fiber &);

		void switch_between( fiber &, fiber &);

		void enable_interruption( fiber &);
		bool interruption_enabled( fiber const&);

		bool is_master( fiber const&);

		bool in_state_not_started( fiber const&);
		bool in_state_ready( fiber const&);
		bool in_state_running( fiber const&);
		bool in_state_wait_for_fiber( fiber const&);
		bool in_state_wait_for_object( fiber const&);
		bool in_state_terminated( fiber const&);

		void set_state_ready( fiber &);
		void set_state_running( fiber &);
		void set_state_wait_for_fiber( fiber &);
		void set_state_wait_for_object( fiber &);
		void set_state_terminated( fiber &);

	public:
		strategy();

		virtual ~strategy();
		virtual void add( fiber) = 0;
		virtual void join( fiber::id const&) = 0;
		virtual void interrupt( fiber::id const&) = 0;
		virtual void reschedule( fiber::id const&) = 0;
		virtual void cancel( fiber::id const&) = 0;
		virtual void yield( fiber::id const&) = 0;
		virtual void register_object( object::id const&) = 0;
		virtual void unregister_object( object::id const&) = 0;
		virtual void wait_for_object( object::id const&) = 0;
		virtual void object_notify_one( object::id const&) = 0;
		virtual void object_notify_all( object::id const&) = 0;
		virtual fiber release( fiber::id const&) = 0;
		virtual void migrate( fiber) = 0;
		virtual void detach_all() = 0;
		virtual bool run() = 0;
		virtual bool empty() = 0;
		virtual std::size_t size() = 0;
		virtual std::size_t ready() = 0;
	};


[section:attach `void attach( fiber &)`]
[variablelist
[[Effects:] [Protected member function in order to register the scheduler in
internal storage from the fiber.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:detach `void detach( fiber &)`]
[variablelist
[[Effects:] [Protected member function in order to unregister the scheduler in
internal storage from the fiber.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:switch_between `void switch_between( fiber & from, fiber & to)`]
[variablelist
[[Effects:] [Protected member function switches from fiber `from` to fiber `to`.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:enable_interruption `void enable_interruption( fiber &)`]
[variablelist
[[Effects:] [Protected member function enables interruption on the fiber.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:interruption_enabled `bool interruption_enabled( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if interruption is enabled on the fiber.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:is_master `bool is_master( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is the `master_fiber`.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:in_state_not_started `bool in_state_not_started( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is in the state `started`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:in_state_ready `bool in_state_ready( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is in the state `ready`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:in_state_running `bool in_state_running( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is in the state `running`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:in_state_wait_for_fiber `bool in_state_wait_for_fiber( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is in the state `wait for fiber`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:in_state_wait_for_object `bool in_state_wait_for_object( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is in the state `wait for object`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:in_state_terminated `bool in_state_terminated( fiber const&)`]
[variablelist
[[Effects:] [Protected member function tests if the fiber is in the state `terminated`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:set_state_ready `void set_state_ready( fiber &)`]
[variablelist
[[Effects:] [Protected member function sets the state of the fiber to `ready`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:set_state_running `void set_state_running( fiber &)`]
[variablelist
[[Effects:] [Protected member function sets the state of the fiber to `running`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:set_state_wait_for_fiber `void set_state_wait_for_fiber( fiber &)`]
[variablelist
[[Effects:] [Protected member function sets the state of the fiber to `wait for fiber`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:set_state_wait_for_object `void set_state_wait_for_object( fiber &)`]
[variablelist
[[Effects:] [Protected member function sets the state of the fiber to `wait for object`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:set_state_terminated `void set_state_terminated( fiber &)`]
[variablelist
[[Effects:] [Protected member function sets the state of the fiber to `terminated`.]] 
[[Throws:] [Nothing.]]
]
[endsect]


[section:ctor `strategy()`]
[variablelist
[[Effects:] [Creates an object of type strategy and initializes the master_fiber member.]]
[[Throws:] [Nothing.]]
]
[endsect]


[section:add `virtual void add( fiber) = 0`]
[variablelist
[[Precondition:] [Fiber was not assigned to another scheduler.]]
[[Effects:] [Add a fiber to the scheduler.]]
]
[endsect]


[section:join `virtual void join( fiber::id const&) = 0`]
[variablelist
[[Precondition:] [Fiber belongs to this scheduler.]]
[[Effects:] [The active fiber will yield until the fiber identified by the id has finished its
execution or was interrupted.]]
]
[endsect]


[section:interrupt `virtual void interrupt( fiber::id const&) = 0`]
[variablelist
[[Precondition:] [Fiber belongs to this scheduler.]]
[[Effects:] [The fiber identified by the id will be interrupted by its next execution.]]
]
[endsect]


[section:reschedule `virtual void reschedule( fiber::id const&) = 0`]
[variablelist
[[Precondition:] [Fiber belongs to this scheduler.]]
[[Effects:] [The scheduling-algorithm will be applied uppon the fiber identified by the id again.]]
]
[endsect]


[section:cancel `virtual void cancel( fiber::id const&) = 0`]
[variablelist
[[Precondition:] [Fiber belongs to this scheduler.]]
[[Effects:] [The fiber with passed identifier will be stopped, e.g. removed from the run-queue.]]
]
[endsect]


[section:yield `virtual void yield( fiber::id const&) = 0`]
[variablelist
[[Precondition:] [Fiber is the active fiber.]]
[[Effects:] [Yield active fiber and switch back to `master_fiber` in order to schedule
another fiber from the internal storage.]]
]
[endsect]


[section:register_object `virtual void register_object( object::id const&) = 0`]
[variablelist
[[Effects:] [Register the object (mutex, condition, event-variable).]]
]
[endsect]


[section:unregister_object `virtual void unregister_object( object::id const&) = 0`]
[variablelist
[[Effects:] [Remove the object (mutex, condition, event-variable)i from the register.]]
]
[endsect]


[section:wait_for_object `virtual void wait_for_object( object::id const&) = 0`]
[variablelist
[[Effects:] [The active fiber waits on object until notified.]]
]
[endsect]


[section:object_notify_one `virtual void object_notify_one( object::id const&) = 0`]
[variablelist
[[Effects:] [Notify one fiber waiting on the object. The fiber gets ready for scheduling.]]
]
[endsect]


[section:object_notify_all `virtual void object_notify_all( object::id const&) = 0`]
[variablelist
[[Effects:] [Notify all fibers waiting on the object. The fibers get ready for scheduling.]]
]
[endsect]


[section:release `virtual void release( fiber::id const&) = 0`]
[variablelist
[[Postcondition:] [The fiber is not terminated or waits on fiber or object.]]
[[Effects:] [Release fiber from scheduler.]]
]
[endsect]


[section:migrate `virtual void migrate( fiber) = 0`]
[variablelist
[[Postcondition:] [The fiber is not already managed by scheduler.]]
[[Effects:] [Adds fiber to scheduler.]]
]
[endsect]


[section:detach_all `virtual void detach_all() = 0`]
[variablelist
[[Effects:] [Detaches all managed fibers from this.]]
]
[endsect]


[section:run `virtual bool run() = 0`]
[variablelist
[[Effects:] [Executes a fiber from the internal storage and removes terminated fibers. The function returns
`true` if a fiber could be executed or a terminated fiber could be removed - otherwise `false`.]]
[[Throws:] [__system_error__ if a system call failed.]]
]
[endsect]

[section:empty `virtual bool empty() = 0`]
[variablelist
[[Effects:] [Returns `true` if the scheduler contains fibers (maybe runnable or waiting).]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:size `virtual std::size_t size() = 0`]
[variablelist
[[Effects:] [Returns how many fibers the scheduler contains (maybe runnable or waiting).]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:ready `virtual std::size_t ready() = 0`]
[variablelist
[[Effects:] [Returns how many fibers are ready to run in the scheduler.]]
[[Throws:] [Nothing.]]
]
[endsect]

[endsect]

[section:round_robin Class `round_robin`]

The class `round_robin` derives from __strategy__ and implements a simple round-robin scheduling-algorithm.
It does not respect priorities of fibers.

[endsect]

[endsect]

[endsect]
