[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:overview Overview]

__boost_fiber__ provides an framework utilizing lightweight threads of execution - also known
as user-space threads, microthreads or fibers.  The API of the library exposes an interface similiar
to __boost_thread__ and contains classes, functions to manage fibers and to synchronize fibers.

A fiber is able to store the current execution state, including all registers and CPU flags, the
instruction pointer, and the stack pointer and later restore this state. The idea is to have multiple
execution paths running on a single thread using a sort of cooperative scheduling (threads are
preemptively scheduled) - the running fiber decides explicitly when its yields to allow another fiber
to run (fiber switching). Fibers are less expensive than threads because the kernel doesn't know
anything about fibers - no kernel transitions are required for scheduling (done in the user-space).
A context switch between threads costs usally thousends of CPU cycles on x86 compared to a fiber
switch with few hundreds of cycles.
A fiber can only run on a single thread at any point in time but may be migrated between threads.
Because a thread can run many different fibers during its life cycle the name ['fiber] was choosen.

Beside fibers a conceptualy equivalent constructs are coroutines. A coroutine can be seen as a 
language-level construct while a fiber is a system-level construct.

In order to use the classes and functions described here, you can either include the specific
headers specified by the descriptions of each class or function, or include the master library
header:

    #include <boost/fiber.hpp>

which includes all the other headers in turn.

Used namespaces are:

    namespace boost::fibers
    namespace boost::this_fiber


[warning This library is ['not] an official Boost library]

[note __boost_fiber__ requires [*Boost Library 1.41.0] .]

__boost_fiber__ depends uppon __boost_atomic__, __boost_move__ and uses some code from __boost_thread__
(especially a specialisation of future).


[heading Tested Platforms]

__boost_fiber__ has been tested on the following platforms and compilers:

*  Debian GNU/Linux 2.6.31.6 (x86_64), GCC 4.3.4
*  Ubuntu GNU/Linux 2.6.28.11 (x86), ICC 11.1
*  FreeBSD 8.0 (x86), GCC 4.2.1
*  OpenSolaris 2009.06 (x86_64), GCC 4.3.2
*  Windows XP Professional (x86), MSVC 9.0


[heading How to build and install]

* download the sources from
[@http://www.boost-consulting.com/vault/index.php?directory=Concurrent%20Programming Boost Vault]
* extract the archive into the boost-source directory
* call [''bjam toolset=<compiler-name> --with-fiber install'] in order to build and install the library

[endsect]
