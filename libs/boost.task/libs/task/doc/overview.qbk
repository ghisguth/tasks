[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]


[section:overview Overview]

__boost_task__ provides a framework for asynchronous execution of tasks (small units of code that can be executed independently and parallel).

* __task__, a __callable__ representing a fine-grained __work_item__:
	* support of task synchron. via primitives like conditions, barriers, event-variables and channels (message exchange)
	  without blocking worker-thread in the __thread_pool__

* __handle__, works as a __act__ associated with a task:
	* __fn_interrupt__, __fn_interrupt_and_wait__, ... allow to cancel an cooperative task
	* __fn_get__ retrieve value or exception of task execution
	* __fn_is_ready__ test if task was executed
	* __fn_wait__, __fn_wait_for__ and __fn_wait_until__ block until task is executed and the result is set
	* functions __waitfor_all__ to wait for all handles

* __async__, executes a task by means of __eps__
	* executes task in current thread
	* executes task in a newly created thread (thread will be destroyed after completion)
	* task gets executed by a __worker_thread__ of a custom __thread_pool__ (for instance with priority or smart scheduling)
	* executes task in newly created thread or in a pool of __worker_threads__ depending on whether the parent-task is already executed in a __thread_pool__

* __thread_pools__ with __work_stealing__ algorithm and __fork_join__ semantics


In order to use the classes and functions described here, you can either include the specific headers specified by the descriptions of each class or function,
or include the master library header:

    #include <boost/task.hpp>

which includes all the other headers in turn.

Used namespaces are:

    namespace boost::tasks
    namespace boost::this_task


[heading Example]


	long fibonacci( long n)
	{
		if ( n == 0) return 0;
		if ( n == 1) return 1;
		long k1( 1), k2( 0);
		for ( int i( 2); i <= n; ++i)
		{
			long tmp( k1);
			k1 = k1 + k2;
			k2 = tmp;
		}
		return k1;
	}

	void main()
	{
		// create a thread-pool
		boost::tasks::static_pool< boost::tasks::unbounded_fifo > > pool( boost::tasks::poolsize( 5) );

		// execute tasks in thread-pool
		// move tasks ownership to executor
		boost::tasks::handle< long > h1(
			boost::tasks::async(
				boost::tasks::make_task( fibonacci, 10),
				pool);
		boost::tasks::handle< long > h2(
			boost::tasks::async(
				boost::tasks::make_task( fibonacci, 5),
				boost::move( t2),
				pool);

		std::cout << "h1: is ready == " << std::boolalpha << h1.is_ready() << "\n";
		std::cout << "h2: is ready == " << std::boolalpha << h2.is_ready() << "\n";

		// wait for completion of both tasks
		boost::tasks::waitfor_all( h1, h2);

		std::cout << "h1: is ready == " << std::boolalpha << h1.is_ready() << "\n";
		std::cout << "h2: is ready == " << std::boolalpha << h2.is_ready() << "\n";
		std::cout << "h1: has value == " << std::boolalpha << h1.has_value() << "\n";
		std::cout << "h2: has value == " << std::boolalpha << h2.has_value() << "\n";
		std::cout << "h1: has exception == " << std::boolalpha << h1.has_exception() << "\n";
		std::cout << "h2: has exception == " << std::boolalpha << h2.has_exception() << "\n";

		// get results
		std::cout << "fibonacci(10) == " << h1.get() << std::endl;
		std::cout << "fibonacci(5) == " << h2.get() << std::endl;
	}


[heading References]

* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2185.html N2185]: Proposed Text for Parallel Task Execution, written by Peter Dimov.

* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2276.html N2276]: Thread Pools and Futures, written by Anthony Williams.

* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2802.html N2802]: A plea to reconsider detach-on-destruction for thread objects, written by Hans-J. Boehm.

* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2880.html N2880]: C++ object lifetime interactions with the threads API, written by Hans-J. Boehm and Lawrence Crowl.

* [@http://herbsutter.wordpress.com 'Sutterâ€™s Mill'] by Herb Sutter

* mailing list of C++ standard committee's Library Working Group

[warning This library is NOT an official Boost library]

[note Please note that __boost_task__ is not optimized yet.]

[note __boost_fiber__ requires [*Boost Library 1.41.0] .]

__boost_task__ depends uppon __boost_atomic__, __boost_move__ and __boost_fiber__.


[heading Tested Platforms]

__boost_task__ has been tested on the following platforms and compilers:

*  Debian GNU/Linux 2.6.31.6 (x86_64), GCC 4.3.4
*  Ubuntu GNU/Linux 2.6.28.11 (x86), ICC 11.1
*  FreeBSD 8.0 (x86), GCC 4.2.1
*  OpenSolaris 2009.06 (x86_64), GCC 4.3.2
*  Windows XP Professional (x86), MSVC 9.0


[heading How to build and install]

* download the sources from
[@http://www.boost-consulting.com/vault/index.php?directory=Concurrent%20Programming Boost Vault]
* extract the archive into the boost-source directory
* call [''bjam toolset=<compiler-name> --with-task install'] in order to build and install the library

[endsect]
