[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:barriers Barriers]

A barrier is a simple concept. Also known as a __rendezvous__, it is a synchronization point between multiple
contexts of execution. The barrier is configured for a particular number of tasks (`n`), and as
tasks reach the barrier they must wait until all `n` tasks have arrived. Once the `n`-th task has reached the
barrier, all the waiting tasks can proceed, and the barrier is reset.

[section:barrier Class `barrier`]

    #include <boost/task/spin/barrier.hpp>

    class barrier
    {
    public:
        barrier( unsigned int initial);

        bool wait();
    };

Instances of __spin_barrier__ are not copyable or movable.

[section:constructor `barrier( unsigned int initial)`]
[variablelist
[[Effects:] [Construct a barrier for `initial` tasks.]]
[[Throws:] [__invalid_argument__ if an error occurs.]]
]
[endsect]

[section:wait `bool wait()`]
[variablelist
[[Effects:] [Block until `initial` tasks have called `wait` on `*this`. When the `initial`-th task calls `wait`,
all waiting tasks are unblocked, and the barrier is reset. ]]
[[Returns:] [`true` for exactly one task from each batch of waiting tasks, `false` otherwise.]]
[[Throws:] [__task_error__ if an error occurs.]]
]
[endsect]

[endsect]

[endsect]
